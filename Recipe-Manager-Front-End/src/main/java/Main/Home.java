/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

import Entities.Recipe;
import Entities.RecipeIngredient;
import dorkbox.notify.Notify;
import dorkbox.notify.Pos;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import okhttp3.FormBody;
import okhttp3.HttpUrl;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.json.JSONArray;
import org.json.JSONObject;
import table_model.RecipeTableModel;

public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    private final Login parent;
    private final RecipeTableModel model;
    private Recipe recipe;
    private final OkHttpClient httpClient = new OkHttpClient();

    public Home(Login login) {
        initComponents();
        setLocationRelativeTo(null);
        this.parent = login;
        model = new RecipeTableModel();
        jTable1.setModel(model);
        new Timer().schedule(task, 300);
    }
    private final TimerTask task = new TimerTask() {
        @Override
        public void run() {
            try {
                Request request = new Request.Builder()
                        .url("http://localhost:8181/api/v1/recipes/all-recipe-ingredients")
                        .addHeader("User-Agent", "OkHttp Bot")
                        .get()
                        .build();
                Response response = httpClient.newCall(request).execute();
                if (!response.isSuccessful()) {
                    throw new IOException("Unexpected code " + response);
                } else {
                    JSONArray array = new JSONArray(response.body().string());
                    array.forEach((a) -> {
                        JSONObject ingredient = (JSONObject) a;
                        RecipeIngredient ri = new RecipeIngredient(ingredient.getLong("id"), ingredient.getString("name"), ingredient.getString("remarks"));
                        container.add(new Ingredient(ri));
                    });
                }
                HttpUrl.Builder urlBuilder = HttpUrl.parse("http://localhost:8181/api/v1/recipes/all-recipes-by-user").newBuilder();
                urlBuilder.addQueryParameter("user_id", String.valueOf(Utils.LoggedUser.getId()));
                String url = urlBuilder.build().toString();
                request = new Request.Builder().url(url).build();
                response = httpClient.newCall(request).execute();
                if (!response.isSuccessful()) {
                    throw new IOException("Unexpected code " + response);
                } else {
                    JSONArray array = new JSONArray(response.body().string());
                    array.forEach((a) -> {
                        JSONObject recipe = (JSONObject) a;
                        Recipe r = new Recipe();
                        r.setId(recipe.getLong("id"));
                        r.setRecipe_name(recipe.getString("recipe_name"));
                        r.setDescription(recipe.getString("description"));
                        r.setPreparation_time(recipe.getString("preparation_time"));
                        r.setCock_time(recipe.getString("cock_time"));
                        r.setCocked_in(recipe.getString("cocked_in"));
                        r.setPrice(recipe.getFloat("price"));
                        r.setServing(recipe.getInt("serving"));
                        r.setVegetarian(recipe.getString("vegetarian"));
                        model.addRecipe(r);
                    });
                }
            } catch (HeadlessException | IOException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                System.out.println(ex.getMessage());
            }
        }

    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        recipeName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        description = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        preTime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cockTime = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        vegerarian = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        servingFor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cockedBy = new javax.swing.JComboBox<>();
        saveButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        container = new javax.swing.JPanel();
        updateButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User Home");
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setMinimumSize(new java.awt.Dimension(0, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(0, 300));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setPreferredSize(new java.awt.Dimension(100, 250));

        jLabel2.setText("Recipe Name");

        jLabel3.setText("Description");

        jLabel4.setText("Preparation Time");

        jLabel5.setText("Cock Time");

        jLabel6.setText("Price");

        vegerarian.setText("Vegetarian");

        jLabel7.setText("Serving For");

        jLabel8.setText("Cocked By");

        cockedBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boiling", "Grilling", "Roasting", "Baking", "Steaming", " ", " " }));

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        container.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingredients"));
        container.setPreferredSize(new java.awt.Dimension(100, 400));
        container.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                containerComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                containerComponentRemoved(evt);
            }
        });
        jScrollPane2.setViewportView(container);

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(recipeName)
                            .addComponent(preTime)
                            .addComponent(servingFor, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(description)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cockedBy, javax.swing.GroupLayout.Alignment.LEADING, 0, 99, Short.MAX_VALUE)
                                    .addComponent(cockTime, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(vegerarian, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 50, Short.MAX_VALUE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(recipeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(preTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cockTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vegerarian))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(servingFor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(cockedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton)
                    .addComponent(updateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jLabel1.setText("Search");
        jPanel4.add(jLabel1);

        jTextField1.setPreferredSize(new java.awt.Dimension(200, 28));
        jPanel4.add(jTextField1);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setPreferredSize(new java.awt.Dimension(452, 200));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setRowHeight(24);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(parent, "Are you sure want to logout", "Confirmation", JOptionPane.YES_OPTION) == JOptionPane.YES_OPTION) {
            this.dispose();
            parent.show();
        }
    }//GEN-LAST:event_formWindowClosing

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        StringBuilder builder = new StringBuilder();
        for (Component c : container.getComponents()) {
            Ingredient i = (Ingredient) c;
            if (i.isSelected()) {
                builder.append(String.valueOf(i.getIngredient().getId())).append(",");
            }
        }
        String str = builder.toString();
        if (!str.isEmpty()) {
            str = str.substring(0, str.length() - 1);
        }
        try {
            if (!recipeName.getText().isEmpty()) {
                if (!description.getText().isEmpty()) {
                    if (!preTime.getText().isEmpty()) {
                        if (!cockTime.getText().isEmpty()) {
                            if (!price.getText().isEmpty()) {
                                if (!servingFor.getText().isEmpty()) {
                                    RequestBody formBody = new FormBody.Builder()
                                            .add("name", recipeName.getText())
                                            .add("description", description.getText())
                                            .add("preTime", preTime.getText())
                                            .add("cockTime", cockTime.getText())
                                            .add("cockedIn", cockedBy.getSelectedItem().toString())
                                            .add("price", price.getText())
                                            .add("servingFor", servingFor.getText())
                                            .add("veg", vegerarian.isSelected() == true ? "YES" : "NO")
                                            .add("user_id", String.valueOf(Utils.LoggedUser.getId()))
                                            .add("ingredients", str)
                                            .build();
                                    Request request = new Request.Builder()
                                            .url("http://localhost:8181/api/v1/recipes/add-recipe")
                                            .addHeader("User-Agent", "OkHttp Bot")
                                            .post(formBody)
                                            .build();
                                    try ( Response response = httpClient.newCall(request).execute()) {
                                        if (!response.isSuccessful()) {
                                            throw new IOException("Unexpected code " + response);
                                        }
                                        if (response.code() == 200) {
                                            Notify.create() // creates a notification, prints out clicked to the console when a notification is clicked.
                                                    .title("New Recipe")
                                                    .text("New Recipe Saved Successfully")
                                                    .position(Pos.TOP_RIGHT)
                                                    .hideAfter(5000)
                                                    .shake(250, 5)
                                                    .showInformation();// You can use warnings and error as well.
                                        } else {
                                            JOptionPane.showMessageDialog(rootPane, response.code());
                                        }

                                    } catch (HeadlessException | IOException ex) {
                                        JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                                        System.out.println(ex.getMessage());
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(rootPane, "Enter Recipe Serving For");
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Enter Recipe Price");
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Enter Recipe Cock Time");
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Enter Recipe Preparation Time");
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Enter Recipe Description");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Enter Recipe Name");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(parent, e.getMessage());
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void containerComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_containerComponentAdded
        // TODO add your handling code here:
        container.updateUI();
    }//GEN-LAST:event_containerComponentAdded

    private void containerComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_containerComponentRemoved
        // TODO add your handling code here:
        container.updateUI();
    }//GEN-LAST:event_containerComponentRemoved

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            if (jTable1.getSelectedRow() > -1) {
                if (JOptionPane.showConfirmDialog(rootPane, "Are you sure want to remove", "Confirmation", JOptionPane.YES_OPTION) == JOptionPane.YES_OPTION) {
                    Recipe selectedRecipe = model.getRecipe(jTable1.getSelectedRow());
                    if (selectedRecipe != null) {
                        RequestBody formBody = new FormBody.Builder()
                                .add("recipe_id", String.valueOf(selectedRecipe.getId()))
                                .build();
                        Request request = new Request.Builder()
                                .url("http://localhost:8181/api/v1/recipes/delete-recipe")
                                .addHeader("User-Agent", "OkHttp Bot")
                                .delete(formBody)
                                .build();
                        try ( Response response = httpClient.newCall(request).execute()) {
                            if (!response.isSuccessful()) {
                                throw new IOException("Unexpected code " + response);
                            }
                            if (response.code() == 200) {
                                Notify.create() // creates a notification, prints out clicked to the console when a notification is clicked.
                                        .title("Delete Recipe")
                                        .text("Recipe Delete Successfully")
                                        .position(Pos.TOP_RIGHT)
                                        .hideAfter(5000)
                                        .shake(250, 5)
                                        .showInformation();// You can use warnings and error as well.
                            } else {
                                JOptionPane.showMessageDialog(rootPane, response.code());
                            }
                        } catch (HeadlessException | IOException ex) {
                            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                            System.out.println(ex.getMessage());
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jTable1KeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            if (jTable1.getSelectedRow() > -1) {
                recipe = model.getRecipe(jTable1.getSelectedRow());
                if (recipe != null) {
                    recipeName.setText(recipe.getRecipe_name());
                    description.setText(recipe.getDescription());
                    preTime.setText(recipe.getPreparation_time());
                    cockTime.setText(recipe.getCock_time());
                    cockedBy.setSelectedItem(recipe.getCocked_in());
                    price.setText(String.valueOf(recipe.getPrice()));
                    servingFor.setText(String.valueOf(recipe.getServing()));
                    vegerarian.setSelected(recipe.getVegetarian().equals("YES"));

                    updateButton.setEnabled(true);
                } else {
                    updateButton.setEnabled(false);
                }
            } else {
                updateButton.setEnabled(false);
            }
        } else {
            updateButton.setEnabled(false);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (!recipeName.getText().isEmpty()) {
                if (!description.getText().isEmpty()) {
                    if (!preTime.getText().isEmpty()) {
                        if (!cockTime.getText().isEmpty()) {
                            if (!price.getText().isEmpty()) {
                                if (!servingFor.getText().isEmpty()) {
                                    RequestBody formBody = new FormBody.Builder()
                                            .add("recipe_id", String.valueOf(recipe.getId()))
                                            .add("name", recipeName.getText())
                                            .add("description", description.getText())
                                            .add("preTime", preTime.getText())
                                            .add("cockTime", cockTime.getText())
                                            .add("cockedIn", cockedBy.getSelectedItem().toString())
                                            .add("price", price.getText())
                                            .add("servingFor", servingFor.getText())
                                            .add("veg", vegerarian.isSelected() == true ? "YES" : "NO")
                                            .add("user_id", String.valueOf(Utils.LoggedUser.getId()))
                                            .build();
                                    Request request = new Request.Builder()
                                            .url("http://localhost:8181/api/v1/recipes/update-recipe")
                                            .addHeader("User-Agent", "OkHttp Bot")
                                            .put(formBody)
                                            .build();
                                    try ( Response response = httpClient.newCall(request).execute()) {
                                        if (!response.isSuccessful()) {
                                            throw new IOException("Unexpected code " + response);
                                        }
                                        if (response.code() == 200) {
                                            Notify.create() // creates a notification, prints out clicked to the console when a notification is clicked.
                                                    .title("Update Recipe")
                                                    .text("Update Recipe Successfully")
                                                    .position(Pos.TOP_RIGHT)
                                                    .hideAfter(5000)
                                                    .shake(250, 5)
                                                    .showInformation();// You can use warnings and error as well.
                                        } else {
                                            JOptionPane.showMessageDialog(rootPane, response.code());
                                        }

                                    } catch (HeadlessException | IOException ex) {
                                        JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                                        System.out.println(ex.getMessage());
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(rootPane, "Enter Recipe Serving For");
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Enter Recipe Price");
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Enter Recipe Cock Time");
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Enter Recipe Preparation Time");
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Enter Recipe Description");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Enter Recipe Name");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(parent, e.getMessage());
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Home().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cockTime;
    private javax.swing.JComboBox<String> cockedBy;
    private javax.swing.JPanel container;
    private javax.swing.JTextField description;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField preTime;
    private javax.swing.JTextField price;
    private javax.swing.JTextField recipeName;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField servingFor;
    private javax.swing.JButton updateButton;
    private javax.swing.JRadioButton vegerarian;
    // End of variables declaration//GEN-END:variables
}
